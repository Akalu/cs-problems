package com.leetcode.matricies;

import java.util.LinkedList;
import java.util.Queue;

/**
 * https://leetcode.com/problems/as-far-from-land-as-possible/
 * 
 * Given an N x N grid containing only values 0 and 1, where 0 represents water
 * and 1 represents land, find a water cell such that its distance to the
 * nearest land cell is maximized and return the distance.
 * 
 * The distance used in this problem is the Manhattan distance: the distance
 * between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
 * 
 * If no land or water exists in the grid, return -1.
 * 
 * Input: 
 * [
 * [1,0,1],
 * [0,0,0],
 * [1,0,1]
 * ]
 * 
 * Output: 2
 * 
 * Explanation: The cell (1, 1) is as far as possible from all the land with
 * distance 2.
 * 
 * 
 */
public class FarFromLand {
	
	static int dist(int x0, int y0, int x1, int y1) {
		return Math.abs(x0 - x1) + Math.abs(y0 - y1);
	}
	
	static boolean valid(boolean[][] checked, int rows, int cols,  int row, int col) {
		return row >=0 && row < rows && col >=0 && col < cols && !checked[row][col];
	}
	
	static void addNearest(boolean[][] checked, Queue<Integer> queue, int rows, int cols,  int row, int col) {
		if (valid(checked, rows, cols, row+1, col)) {
			checked[row+1][col] = true;
			queue.add(row+1);
			queue.add(col);
		}
		if (valid(checked, rows, cols, row-1, col)) {
			checked[row-1][col] = true;
			queue.add(row-1);
			queue.add(col);
		}
		if (valid(checked, rows, cols, row+1, col+1)) {
			checked[row+1][col+1] = true;
			queue.add(row+1);
			queue.add(col+1);
		}
		if (valid(checked, rows, cols, row-1, col+1)) {
			checked[row-1][col+1] = true;
			queue.add(row-1);
			queue.add(col+1);
		}
		if (valid(checked, rows, cols, row+1, col-1)) {
			checked[row+1][col-1] = true;
			queue.add(row+1);
			queue.add(col-1);
		}
		if (valid(checked, rows, cols, row-1, col-1)) {
			checked[row-1][col-1] = true;
			queue.add(row-1);
			queue.add(col-1);
		}
		if (valid(checked, rows, cols, row, col-1)) {
			checked[row][col-1] = true;
			queue.add(row);
			queue.add(col-1);
		}
		if (valid(checked, rows, cols, row, col+1)) {
			checked[row][col+1] = true;
			queue.add(row);
			queue.add(col+1);
		}
	}
	
	/**
	 * Returns the distance  from the point (row,col) to the nearest land
	 * @param bMap
	 * @param rows
	 * @param cols
	 * @param row
	 * @param col
	 * @return
	 */
	static int getMinDist(boolean[][] bMap, int rows, int cols,  int row, int col) {
		int d = Integer.MAX_VALUE;
		boolean[][] checked = new boolean[rows][cols];
		checked[row][col] = true;
		Queue<Integer> queue = new LinkedList<>();
		
		queue.clear();
		queue.add(row);
		queue.add(col);
		while (!queue.isEmpty()) {
			// (i,j) is a potential land
			int i = queue.poll();
			int j = queue.poll();
			addNearest(checked, queue, rows, cols, i, j);
			if (bMap[i][j]) {// is land
				int newDist = dist(i,j,row,col);
				if (newDist <= d) {
					d = newDist;
					if (d == 1) {
						return d;
					}
				}
			}
		}
		return d;
	}
	
	public static int maxDistance(int[][] grid) {
		int rows = grid.length;
		int cols = 0;
		if (rows > 0) {
			cols = grid[0].length;
		}
		
		int maxD = -1;
		
		boolean[][] bMap = new boolean[rows][cols];
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < cols; col++) {
				if (grid[row][col] == 1) {
					bMap[row][col] = true;
				}
			}
		}

		
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < cols; col++) {
				if (grid[row][col] == 1) {
					continue;
				}
				int d = getMinDist(bMap, rows, cols, row, col);
				if (d > maxD) {
					maxD = d;
				}
			}
			
		}
		if (maxD == -1 || maxD == Integer.MAX_VALUE) {
			return -1;
		}
		return maxD;
        
    }


	public static void main(String[] arg) {
		
		int[][] mtx = {
				{1, 0, 1},
				{0, 0, 0},
				{1, 0, 1}
		};
		System.out.println(maxDistance(mtx));


		int[][] mtx1 = {
				{1, 0, 1, 0, 0},
				{0, 0, 0, 1, 0},
				{1, 0, 1, 0, 0},
				{1, 0, 0, 0, 0},
				{1, 0, 1, 0, 0},
		};
		System.out.println(maxDistance(mtx1));
		
		int[][] mtx2 = {
				{1, 1, 1},
				{1, 1, 1}
		};
		System.out.println(maxDistance(mtx2));

		
		int[][] mtx3 = {
				{0, 0},
				{0, 0}
		};
		System.out.println(maxDistance(mtx3));

		int[][] mtx4 = {
				{1, 0, 1, 0, 0},
				{0, 0, 0, 1, 0},
				{1, 0, 0, 0, 0},
				{1, 0, 0, 0, 0},
				{1, 0, 0, 0, 0},
		};
		System.out.println(maxDistance(mtx4));//4
		
		int[][] mtx5 = {
				{1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,0},
				{1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0},
				{1,0,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,1,0,1,1,1},
				{0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,0,1,0},
				{0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0},
				{0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,0,0,1,0},
				{0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,0,1,1},
				{1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,1,0,1,1,0,1,1},
				{1,0,1,0,0,1,0,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,0},
				{1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1},
				{0,1,1,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1,1,0,1,0,0,0},
				{1,1,0,0,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,1,1,1,1},
				{1,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0},
				{0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1},
				{1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,1,1,0,1},
				{1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1},
				{1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1},
				{0,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,1},
				{1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0},
				{1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0},
				{0,0,0,0,1,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0},
				{1,1,1,0,1,0,1,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0},
				{0,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,1,1,0,1,0,0},
				{0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0,1},
				{1,0,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,1,1,1,0},
				{0,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,1,0,1,0,0},
				{0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
				{1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1},
				{1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1},
				{0,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0},
				{1,1,0,1,1,0,1,1,1,0,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1},
				{0,0,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,1},
				{1,0,0,1,0,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0},
				{1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,0,1},
				{1,0,1,1,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1},
				{0,1,0,0,0,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
				{0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1},
				{0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,0,1},
				{1,0,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,0,0,1},
				{1,1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,1,1,1,0,0}};
		
			System.out.println(maxDistance(mtx5));// 3
			
			int[][] mtx6 = 
				{{1,0,0,0,0,0,0,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1},
				{1,0,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,0,1,0,0,1,1},
				{0,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1},
				{0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0},
				{0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,1,0,0,0,1,0,1,0,0,0},
				{0,0,1,0,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1},
				{1,1,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,0,0,0,1,0,0,0,0},
				{1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,1,0,0,1,0,1},
				{0,0,0,1,0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0},
				{1,0,0,1,1,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
				{1,1,0,1,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0},
				{0,1,1,0,1,0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,1,1,0,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,1},
				{1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1},
				{1,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0},
				{0,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1},
				{0,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1},
				{1,0,1,1,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1},
				{1,1,0,0,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1},
				{1,0,1,0,0,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0},
				{0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1},
				{0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,0,1,1,1,0,0},
				{0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,0,0,0,0,0,1,1,0,0,0,1},
				{0,1,0,1,0,1,0,1,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,0,1,1,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,0},
				{1,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,1,0,0,1,1},
				{1,1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1},
				{1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0},
				{1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,0,1,0,0,1},
				{0,1,1,0,0,1,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1},
				{0,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0},
				{1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0},
				{1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1},
				{0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1},
				{0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,0},
				{1,0,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,1,0,1,0,1,0,0,1,1,1,0,0,1},
				{0,0,1,1,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1},
				{1,0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1},
				{1,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0},
				{1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,1},
				{0,0,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,1,1,0,1,0,0,0,0},
				{0,1,1,1,1,0,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,1,0,0},
				{0,1,0,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,0,0},
				{1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,0,1,0},
				{0,0,1,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,1,1,0,0,1,0,1,0,0,0,0,0,1,1,0,1,0},
				{1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,1,1,0},
				{0,1,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,1,0,0,1},
				{0,1,0,1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,1,1},
				{1,1,0,0,0,1,0,0,1,1,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0},
				{0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1},
				{0,0,1,0,1,1,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1},
				{1,0,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0}};

			

			System.out.println(maxDistance(mtx6));// 2
			

}

}
