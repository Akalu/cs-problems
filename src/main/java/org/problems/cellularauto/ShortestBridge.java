package org.problems.cellularauto;

import java.util.LinkedList;
import java.util.Queue;

/**
 * https://leetcode.com/problems/shortest-bridge/
 * 
 * In a given 2D binary array A, there are two islands. (An island is a
 * 4-directionally connected group of 1s not connected to any other 1s.)
 * 
 * Now, we may change 0s to 1s so as to connect the two islands together to form
 * 1 island.
 * 
 * Return the smallest number of 0s that must be flipped. (It is guaranteed that
 * the answer is at least 1.)
 * 
 * 
 * 
 * Example 1:
 * 
 * Input: A = [[0,1],[1,0]] Output: 1 
 * 
 * Example 2:
 * 
 * Input: A = 
 {
 {0,1,0],
 {0,0,0],
 {0,0,1]] 
 * Output: 2 
 * 
 * Example 3:
 * 
 * Input: A = 
 {
 {1,1,1,1,1],
 {1,0,0,0,1],
 {1,0,1,0,1],
 {1,0,0,0,1],
 {1,1,1,1,1]]
 * Output: 1
 * 
 * 
 * Constraints:
 * 
 * 2 <= A.length == A[0].length <= 100 
 * A[i][j] == 0 or A[i][j] == 1
 * 
 * 
 * 
 */
public class ShortestBridge {
	
	static boolean isValid(int i, int j, int n, int m) {
		return (i >= 0 && i < n && j >= 0 && j < m);
	}
	
	static int[] directions = {1,0, -1,0, 0,1, 0,-1};

	public static int shortestBridge(int[][] a) {
		int n = a.length;
		int m = 0;
		if (n > 0) {
			m = a[0].length;
		}
		int iIslandOne = 0;
		int jIslandOne = 0;
		// find some island
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (a[i][j] == 1) {
					iIslandOne = i;
					jIslandOne = j;
					break;
				}
			}
		}
		int[][] res = new int[n][m];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (a[i][j] == 1) {
					a[i][j] = 257;
				}
				res[i][j] = Integer.MAX_VALUE;
			}
		}
		
		boolean[][] visited = new boolean[n][m];
		// mark one island as 257
		Queue<Integer> q = new LinkedList<>();
		q.add(iIslandOne);
		q.add(jIslandOne);
		a[iIslandOne][jIslandOne] = 256;
		while (!q.isEmpty()) {
			int iCur = q.poll();
			int jCur = q.poll();
			visited[iCur][jCur] = true;
			for (int i = 0; i < 8; i+=2) {
				int iNext = iCur + directions[i];
				int jNext = jCur + directions[i+1];
				if (isValid(iNext, jNext, n, m)) {
					if (!visited[iNext][jNext] && a[iNext][jNext] == 257) {
						a[iNext][jNext] = 256;
						visited[iNext][jNext] = true;
						q.add(iNext);
						q.add(jNext);
					}
				}
			}
		}

		// propagate layers
		
		visited = new boolean[n][m];
		q.add(iIslandOne);
		q.add(jIslandOne);
		while (!q.isEmpty()) {
			int iCur = q.poll();
			int jCur = q.poll();
			visited[iCur][jCur] = true;
			for (int i = 0; i < 8; i+=2) {
				int iNext = iCur + directions[i];
				int jNext = jCur + directions[i+1];
				if (isValid(iNext, jNext, n, m)) {
					
					if (a[iNext][jNext] >= 257) {
						int val = (a[iCur][jCur] % 128) + 256 + 1;
						res[iNext][jNext] = Math.min(val, res[iNext][jNext]);
						a[iNext][jNext] = val;
					} else if (a[iNext][jNext] < 256) {
						int old = a[iNext][jNext];
						a[iNext][jNext] = a[iNext][jNext] == 0 ? a[iCur][jCur] % 256  + 1 : Math.min(a[iNext][jNext],a[iCur][jCur] % 256  + 1);
						if (!visited[iNext][jNext] || old != a[iNext][jNext]) {
							q.add(iNext);
							q.add(jNext);
						}
						visited[iNext][jNext] = true;
					}else if (a[iNext][jNext] == 256) {
						if (!visited[iNext][jNext]) {
							q.add(iNext);
							q.add(jNext);
						}
						visited[iNext][jNext] = true;
					}
				}
			}
		}
		int cells = Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (res[i][j] < Integer.MAX_VALUE) {
					cells = Math.min(res[i][j], cells);
				}
			}
		}
		int dist =  (cells - 257);
		return dist == 0 ? 1: dist;

	}

	public static void main(String[] arg) {
		
		int[][] a = {
				{0,1,0},
				{0,0,0},
				{0,0,1}
		};

		System.out.println(shortestBridge(a));//2

		int[][] a1 = {
				{0,1,0},
				{0,0,1},
				{0,0,1}
		};

		System.out.println(shortestBridge(a1));//1

		int[][] a2 = {
				{0,1,0},
				{0,0,0},
				{0,0,0},
				{0,0,1}
		};

		System.out.println(shortestBridge(a2));//3

		int[][] a3 = {
				{1,1,1,1,1},
				{1,0,0,0,1},
				{1,0,1,0,1},
				{1,0,0,0,1},
				{1,1,1,1,1}
		};

		System.out.println(shortestBridge(a3));//1

		int[][] a4 = {
				{0,1,0,0,0},
				{0,1,0,1,1},
				{0,0,0,0,1},
				{0,0,0,0,0},
				{0,0,0,0,0}
		};

		System.out.println(shortestBridge(a4));//1
		
		int[][] a5 = {
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,1,1,0,1,0,0},
				{0,0,0,1,0,0,1,1,0},
				{0,0,0,0,0,1,1,0,0},
				{0,0,0,0,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0}
		};
		

		System.out.println(shortestBridge(a5));//1
		
		int[][] a6 = {
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0},
				{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0},
				{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0}
				};
		
		System.out.println(shortestBridge(a6));//1
		
		int[][] a7 = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
		
		System.out.println(shortestBridge(a7));//1




	}

}
